From ae84583fc7b97f3cc1d582fb3a91aea31492f637 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 19 Jan 2022 18:19:55 +0300
Subject: [PATCH] winevulkan: HACK: Report Windows driver version for AMD VAN
 GOGH.

CW-Bug-Id: #20009
---
 dlls/winevulkan/loader.c | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/dlls/winevulkan/loader.c b/dlls/winevulkan/loader.c
index fcb79983114..8095f7d4310 100644
--- a/dlls/winevulkan/loader.c
+++ b/dlls/winevulkan/loader.c
@@ -368,6 +368,15 @@ static void fill_luid_property(VkPhysicalDeviceProperties2 *properties2)
             id->deviceNodeMask);
 }

+static void update_driver_version( VkPhysicalDeviceProperties *properties )
+{
+    if (properties->vendorID == 0x1002 && properties->deviceID == 0x163f)
+    {
+        /* AMD VANGOGH */
+        properties->driverVersion = VK_MAKE_VERSION(21, 20, 1);
+    }
+}
+
 void WINAPI vkGetPhysicalDeviceProperties(VkPhysicalDevice physical_device,
         VkPhysicalDeviceProperties *properties)
 {
@@ -390,6 +399,7 @@ void WINAPI vkGetPhysicalDeviceProperties(VkPhysicalDevice physical_device,
             }
         }
     }
+    update_driver_version(properties);
 }

 void WINAPI vkGetPhysicalDeviceProperties2(VkPhysicalDevice phys_dev,
@@ -415,6 +425,7 @@ void WINAPI vkGetPhysicalDeviceProperties2(VkPhysicalDevice phys_dev,
             }
         }
     }
+    update_driver_version(&properties2->properties);
 }

 void WINAPI vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice phys_dev,
@@ -440,6 +451,7 @@ void WINAPI vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice phys_dev,
             }
         }
     }
+    update_driver_version(&properties2->properties);
 }

 VkResult WINAPI vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT *pTimestampInfos, uint64_t *pTimestamps, uint64_t *pMaxDeviation)
From 399675bd511cbfd57a44e3afaae32a9ddf6dac87 Mon Sep 17 00:00:00 2001
From: Zhiyi Zhang <zzhang@codeweavers.com>
Date: Wed, 11 Nov 2020 10:41:42 +0800
Subject: [PATCH] winex11.drv: Call XIconifyWindow() after XMapWindow() with a
 minimized window.

Mutter always unminimizes a window when handling map requests. So a window could be in
normal state as far as Mutter concerns while Wine mistakenly considers it still minimized.

Fix Disgaea PC black screen after Alt+Tab in fullscreen mode.

CW-Bug-Id: #18364
Signed-off-by: Zhiyi Zhang <zzhang@codeweavers.com>
---
 dlls/winex11.drv/window.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 76d06b57814..b8cba02a0a8 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1346,6 +1346,9 @@ static void map_window( HWND hwnd, DWORD new_style )
             update_net_wm_states( data );
             sync_window_style( data );
             XMapWindow( data->display, data->whole_window );
+            /* Mutter always unminimizes windows when handling map requests. Restore iconic state */
+            if (new_style & WS_MINIMIZE)
+                XIconifyWindow( data->display, data->whole_window, data->vis.screen );
             XFlush( data->display );
             if (data->surface && data->vis.visualid != default_visual.visualid)
                 data->surface->funcs->flush( data->surface );
@@ -2947,9 +2950,17 @@ void CDECL X11DRV_WindowPosChanged( HWND hwnd, HWND insert_after, UINT swp_flags
             data->iconic = (new_style & WS_MINIMIZE) != 0;
             TRACE( "changing win %p iconic state to %u\n", data->hwnd, data->iconic );
             if (data->iconic)
+            {
                 XIconifyWindow( data->display, data->whole_window, data->vis.screen );
+            }
             else if (is_window_rect_mapped( rectWindow ))
+            {
+                /* whole_window could be both iconic and mapped. Since XMapWindow() doesn't do
+                 * anything if the window is already mapped, we need to unmap it first */
+                if (data->mapped)
+                    XUnmapWindow( data->display, data->whole_window );
                 XMapWindow( data->display, data->whole_window );
+            }
             update_net_wm_states( data );
         }
         else

From cbb473f9808f96bb948229536eb5d57ea7629a58 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 23 Nov 2021 10:54:06 +0100
Subject: [PATCH] winex11.drv: Listen to the root window property changes.

CW-Bug-Id: #19673
CW-Bug-Id: #19991
---
 dlls/winex11.drv/systray.c | 2 +-
 dlls/winex11.drv/window.c  | 1 +
 2 files changed, 2 insertions(+), 1 deletion(-)

diff --git a/dlls/winex11.drv/systray.c b/dlls/winex11.drv/systray.c
index c6d12b21c28..ac6e317ea5c 100644
--- a/dlls/winex11.drv/systray.c
+++ b/dlls/winex11.drv/systray.c
@@ -625,7 +625,7 @@ static BOOL init_systray(void)
         sprintf( systray_buffer, "_NET_SYSTEM_TRAY_S%u", DefaultScreen( display ) );
         systray_atom = XInternAtom( display, systray_buffer, False );
     }
-    XSelectInput( display, root_window, StructureNotifyMask );
+    XSelectInput( display, root_window, StructureNotifyMask | PropertyChangeMask );

     init_done = TRUE;
     return TRUE;
diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index b8cba02a0a8..a0d71c6e7f6 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -2233,6 +2233,7 @@ BOOL CDECL X11DRV_CreateWindow( HWND hwnd )
                                            InputOnly, default_visual.visual,
                                            CWOverrideRedirect | CWEventMask, &attr );
         x11drv_xinput_enable( data->display, data->clip_window, attr.event_mask );
+        XSelectInput( data->display, DefaultRootWindow( data->display ), PropertyChangeMask );
         XFlush( data->display );
         SetPropA( hwnd, clip_window_prop, (HANDLE)data->clip_window );
         X11DRV_InitClipboard();
From 14de66fd7ca005a0a4f8ef2d3357a477ad054e5d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 23 Nov 2021 11:15:12 +0100
Subject: [PATCH] HACK: gamescope: winex11.drv: Track GAMESCOPE_FOCUSED_APP
 property changes.

CW-Bug-Id: #19673
---
 dlls/winex11.drv/event.c       | 32 ++++++++++++++++++++++++++++++++
 dlls/winex11.drv/x11drv.h      |  1 +
 dlls/winex11.drv/x11drv_main.c |  3 ++-
 3 files changed, 35 insertions(+), 1 deletion(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index b0ef922ca5d..53fd1e00b1c 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -1450,6 +1450,36 @@ static void handle__net_wm_state_notify( HWND hwnd, XPropertyEvent *event )
     release_win_data( data );
 }

+static int handle_gamescope_focused_app_error( Display *dpy, XErrorEvent *event, void *arg )
+{
+    WARN( "Failed to read GAMESCOPE_FOCUSED_APP property, ignoring.\n" );
+    return 1;
+}
+
+static void handle_gamescope_focused_app( XPropertyEvent *event )
+{
+    static const char *sgi = NULL;
+
+    unsigned long count, remaining, *property;
+    int format, app_id, focused_app_id;
+    Atom type;
+
+    if (!sgi && !(sgi = getenv( "SteamGameId" ))) return;
+    app_id = atoi( sgi );
+
+    X11DRV_expect_error( event->display, handle_gamescope_focused_app_error, NULL );
+    XGetWindowProperty( event->display, DefaultRootWindow( event->display ), x11drv_atom( GAMESCOPE_FOCUSED_APP ),
+                        0, ~0UL, False, XA_CARDINAL, &type, &format, &count, &remaining, (unsigned char **)&property );
+    if (X11DRV_check_error()) focused_app_id = app_id;
+    else
+    {
+        if (!property) focused_app_id = app_id;
+        else focused_app_id = *property;
+        XFree( property );
+    }
+
+    TRACE( "Got app id %u, focused app %u\n", app_id, focused_app_id );
+}

 /***********************************************************************
  *           X11DRV_PropertyNotify
@@ -1459,6 +1489,8 @@ static BOOL X11DRV_PropertyNotify( HWND hwnd, XEvent *xev )
     XPropertyEvent *event = &xev->xproperty;
     char *name;

+    if (event->atom == x11drv_atom( GAMESCOPE_FOCUSED_APP )) handle_gamescope_focused_app( event );
+
     if (!hwnd) return FALSE;

     name = XGetAtomName(event->display, event->atom);
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 7bb0e95d8d3..c9033074585 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -547,6 +547,7 @@ enum x11drv_atoms
     XATOM_text_rtf,
     XATOM_text_richtext,
     XATOM_text_uri_list,
+    XATOM_GAMESCOPE_FOCUSED_APP,
     NB_XATOMS
 };

diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index a03eb52ad46..2dd81a39e28 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -228,7 +228,8 @@ static const char * const atom_names[NB_XATOMS - FIRST_XATOM] =
     "text/plain",
     "text/rtf",
     "text/richtext",
-    "text/uri-list"
+    "text/uri-list",
+    "GAMESCOPE_FOCUSED_APP"
 };

 /***********************************************************************
From 266d6749771c5fa21403809f0277070a90626d48 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 23 Nov 2021 11:17:18 +0100
Subject: [PATCH] HACK: gamescope: winex11.drv: Ignore mouse events when Steam
 Keyboard is opened.

Using a global __wine_steamclient_KeyboardActivated event. We need to
keep keyboard events though as it's how the OSK will communicate its
input.

CW-Bug-Id: #19673
---
 dlls/winex11.drv/event.c       | 22 +++++++++++++++++++++-
 dlls/winex11.drv/mouse.c       |  1 +
 dlls/winex11.drv/x11drv.h      |  1 +
 dlls/winex11.drv/x11drv_main.c |  3 +++
 4 files changed, 26 insertions(+), 1 deletion(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 53fd1e00b1c..6aaeafb5dd4 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -447,18 +447,22 @@ static BOOL process_events( Display *display, Bool (*filter)(Display*, XEvent*,X
 {
     XEvent event, prev_event;
     int count = 0;
-    BOOL queued = FALSE, overlay_enabled = FALSE;
+    BOOL queued = FALSE, overlay_enabled = FALSE, steam_keyboard_opened = FALSE;
     enum event_merge_action action = MERGE_DISCARD;
     ULONG_PTR overlay_filter = QS_KEY | QS_MOUSEBUTTON | QS_MOUSEMOVE;
+    ULONG_PTR keyboard_filter = QS_MOUSEBUTTON | QS_MOUSEMOVE;

     if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
         overlay_enabled = TRUE;
+    if (WaitForSingleObject(steam_keyboard_event, 0) == WAIT_OBJECT_0)
+        steam_keyboard_opened = TRUE;

     prev_event.type = 0;
     while (XCheckIfEvent( display, &event, filter, (char *)arg ))
     {
         count++;
         if (overlay_enabled && filter_event( display, &event, (char *)overlay_filter )) continue;
+        if (steam_keyboard_opened && filter_event( display, &event, (char *)keyboard_filter )) continue;
         if (XFilterEvent( &event, None ))
         {
             /*
@@ -1459,9 +1463,11 @@ static int handle_gamescope_focused_app_error( Display *dpy, XErrorEvent *event,
 static void handle_gamescope_focused_app( XPropertyEvent *event )
 {
     static const char *sgi = NULL;
+    static BOOL steam_keyboard_opened;

     unsigned long count, remaining, *property;
     int format, app_id, focused_app_id;
+    BOOL keyboard_opened;
     Atom type;

     if (!sgi && !(sgi = getenv( "SteamGameId" ))) return;
@@ -1478,7 +1484,21 @@ static void handle_gamescope_focused_app( XPropertyEvent *event )
         XFree( property );
     }

+    keyboard_opened = app_id != focused_app_id;
+    if (steam_keyboard_opened == keyboard_opened) return;
+    steam_keyboard_opened = keyboard_opened;
+
     TRACE( "Got app id %u, focused app %u\n", app_id, focused_app_id );
+    if (keyboard_opened)
+    {
+        TRACE( "Steam Keyboard is opened, filtering events.\n" );
+        SetEvent( steam_keyboard_event );
+    }
+    else
+    {
+        TRACE( "Steam Keyboard is closed, stopping events filter.\n" );
+        ResetEvent( steam_keyboard_event );
+    }
 }

 /***********************************************************************
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index 0e13ce0e773..ea479d58264 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -1554,6 +1554,7 @@ BOOL CDECL X11DRV_GetCursorPos(LPPOINT pos)
     BOOL ret;

     if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0) return FALSE;
+    if (WaitForSingleObject(steam_keyboard_event, 0) == WAIT_OBJECT_0) return FALSE;

     ret = XQueryPointer( display, root_window, &root, &child, &rootX, &rootY, &winX, &winY, &xstate );
     if (ret)
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index c9033074585..612069d30cf 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -450,6 +450,7 @@ extern HMODULE x11drv_module DECLSPEC_HIDDEN;
 extern char *process_name DECLSPEC_HIDDEN;
 extern Display *clipboard_display DECLSPEC_HIDDEN;
 extern HANDLE steam_overlay_event DECLSPEC_HIDDEN;
+extern HANDLE steam_keyboard_event DECLSPEC_HIDDEN;

 /* atoms */

diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index 2dd81a39e28..e22528bdd34 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -90,6 +90,7 @@ int xfixes_event_base = 0;
 HMODULE x11drv_module = 0;
 char *process_name = NULL;
 HANDLE steam_overlay_event;
+HANDLE steam_keyboard_event;
 BOOL layered_window_client_hack = FALSE;

 static x11drv_error_callback err_callback;   /* current callback for error */
@@ -834,9 +835,11 @@ BOOL WINAPI DllMain( HINSTANCE hinst, DWORD reason, LPVOID reserved )
         x11drv_module = hinst;
         ret = process_attach();
         steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+        steam_keyboard_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_KeyboardActivated");
         break;
     case DLL_PROCESS_DETACH:
         CloseHandle(steam_overlay_event);
+        CloseHandle(steam_keyboard_event);
         break;
     }
     return ret;
From ed9751078cc384274d780e7ecf2a212e9ea737d4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 26 Jan 2022 19:25:56 +0100
Subject: [PATCH] HACK: gamescope: dinput: Ignore joystick input when Steam
 Keyboard is opened.

---
 dlls/dinput/dinput_main.c    | 3 +++
 dlls/dinput/dinput_private.h | 1 +
 dlls/dinput/joystick_hid.c   | 3 ++-
 3 files changed, 6 insertions(+), 1 deletion(-)

diff --git a/dlls/dinput/dinput_main.c b/dlls/dinput/dinput_main.c
index 87226fff1b9..11ac7c13b8c 100644
--- a/dlls/dinput/dinput_main.c
+++ b/dlls/dinput/dinput_main.c
@@ -1465,6 +1465,7 @@ void check_dinput_events(void)
 }

 HANDLE steam_overlay_event;
+HANDLE steam_keyboard_event;

 BOOL WINAPI DllMain( HINSTANCE inst, DWORD reason, LPVOID reserved)
 {
@@ -1473,6 +1474,7 @@ BOOL WINAPI DllMain( HINSTANCE inst, DWORD reason, LPVOID reserved)
       case DLL_PROCESS_ATTACH:
         DisableThreadLibraryCalls(inst);
         steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+        steam_keyboard_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_KeyboardActivated");
         DINPUT_instance = inst;
         register_di_em_win_class();
         break;
@@ -1482,6 +1484,7 @@ BOOL WINAPI DllMain( HINSTANCE inst, DWORD reason, LPVOID reserved)
         unregister_di_em_win_class();
         DeleteCriticalSection(&dinput_hook_crit);
         CloseHandle(steam_overlay_event);
+        CloseHandle(steam_keyboard_event);
         break;
     }
     return TRUE;
diff --git a/dlls/dinput/dinput_private.h b/dlls/dinput/dinput_private.h
index 37d4a4a060a..4c5660baca1 100644
--- a/dlls/dinput/dinput_private.h
+++ b/dlls/dinput/dinput_private.h
@@ -49,6 +49,7 @@ struct IDirectInputImpl
 extern const IDirectInput7AVtbl dinput7_a_vtbl DECLSPEC_HIDDEN;
 extern const IDirectInput8AVtbl dinput8_a_vtbl DECLSPEC_HIDDEN;
 extern HANDLE steam_overlay_event DECLSPEC_HIDDEN;
+extern HANDLE steam_keyboard_event DECLSPEC_HIDDEN;

 extern HRESULT mouse_enum_device( DWORD type, DWORD flags, DIDEVICEINSTANCEW *instance, DWORD version );
 extern HRESULT mouse_create_device( IDirectInputImpl *dinput, const GUID *guid, IDirectInputDevice8W **out );
diff --git a/dlls/dinput/joystick_hid.c b/dlls/dinput/joystick_hid.c
index 9ffaa2786d4..dd17cd478ae 100644
--- a/dlls/dinput/joystick_hid.c
+++ b/dlls/dinput/joystick_hid.c
@@ -1252,7 +1252,8 @@ static HRESULT hid_joystick_read( IDirectInputDevice8W *iface )
         }
     }

-    if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0) /* steam overlay is enabled */
+    if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0 || /* steam overlay is enabled */
+        WaitForSingleObject(steam_keyboard_event, 0) == WAIT_OBJECT_0) /* steam keyboard is enabled */
         params.reset_state = TRUE;
     else
         params.reset_state = FALSE;
From c00909b683c229658ad89f77ceea724e2f0f1bd1 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 26 Jan 2022 19:26:19 +0100
Subject: [PATCH] HACK: gamescope: xinput1_3: Ignore gamepad input when Steam
 Keyboard is opened.

---
 dlls/xinput1_3/main.c | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/dlls/xinput1_3/main.c b/dlls/xinput1_3/main.c
index f57b5ee360b..ee132d58aed 100644
--- a/dlls/xinput1_3/main.c
+++ b/dlls/xinput1_3/main.c
@@ -125,6 +125,7 @@ static HANDLE stop_event;
 static HANDLE done_event;
 static HANDLE update_event;
 static HANDLE steam_overlay_event;
+static HANDLE steam_keyboard_event;

 static BOOL find_opened_device(const WCHAR *device_path, int *free_slot)
 {
@@ -547,6 +548,7 @@ static void stop_update_thread(void)
     CloseHandle(done_event);
     CloseHandle(update_event);
     CloseHandle(steam_overlay_event);
+    CloseHandle(steam_keyboard_event);

     for (i = 0; i < XUSER_MAX_COUNT; i++) controller_destroy(&controllers[i], FALSE);
 }
@@ -743,6 +745,7 @@ static BOOL WINAPI start_update_thread_once( INIT_ONCE *once, void *param, void
     HANDLE thread;

     steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+    steam_keyboard_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_KeyboardActivated");

     start_event = CreateEventA(NULL, FALSE, FALSE, NULL);
     if (!start_event) ERR("failed to create start event, error %u\n", GetLastError());
@@ -839,6 +842,7 @@ DWORD WINAPI DECLSPEC_HOTPATCH XInputSetState(DWORD index, XINPUT_VIBRATION *vib
     if (!controller_lock(&controllers[index])) return ERROR_DEVICE_NOT_CONNECTED;

     if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0) ret = ERROR_SUCCESS;
+    else if (WaitForSingleObject(steam_keyboard_event, 0) == WAIT_OBJECT_0) ret = ERROR_SUCCESS;
     else ret = HID_set_state(&controllers[index], vibration);

     controller_unlock(&controllers[index]);
@@ -858,6 +862,7 @@ static DWORD xinput_get_state(DWORD index, XINPUT_STATE *state)
     if (!controller_lock(&controllers[index])) return ERROR_DEVICE_NOT_CONNECTED;

     if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0) memset(state, 0, sizeof(*state));
+    else if (WaitForSingleObject(steam_keyboard_event, 0) == WAIT_OBJECT_0) memset(state, 0, sizeof(*state));
     else *state = controllers[index].state;

     controller_unlock(&controllers[index]);
From ef828e66f330bc8eaaad45609c45699bba371270 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 28 Oct 2021 16:41:17 +0200
Subject: [PATCH] HACK: gamescope: winex11.drv: Use native screen rect for
 absolute raw event positions.

CW-Bug-Id: #18214
---
 dlls/winex11.drv/display.c | 13 +++++++++++++
 dlls/winex11.drv/mouse.c   |  1 +
 dlls/winex11.drv/x11drv.h  |  1 +
 3 files changed, 15 insertions(+)

diff --git a/dlls/winex11.drv/display.c b/dlls/winex11.drv/display.c
index b3ed448c43f..f3e928ac25e 100644
--- a/dlls/winex11.drv/display.c
+++ b/dlls/winex11.drv/display.c
@@ -55,6 +55,7 @@ struct x11drv_display_device_handler desktop_handler;

 /* Cached screen information, protected by screen_section */
 static HKEY video_key;
+static RECT native_screen_rect;
 static RECT virtual_screen_rect;
 static RECT primary_monitor_rect;
 static FILETIME last_query_screen_time;
@@ -125,6 +126,7 @@ static BOOL update_screen_cache(void)
     }

     EnterCriticalSection(&screen_section);
+    if (!native_screen_rect.bottom) native_screen_rect = virtual_rect;
     virtual_screen_rect = virtual_rect;
     primary_monitor_rect = primary_rect;
     last_query_screen_time = filetime;
@@ -170,6 +172,17 @@ POINT root_to_virtual_screen(INT x, INT y)
     return pt;
 }

+RECT get_native_screen_rect(void)
+{
+    RECT rect;
+
+    update_screen_cache();
+    EnterCriticalSection(&screen_section);
+    rect = native_screen_rect;
+    LeaveCriticalSection(&screen_section);
+    return rect;
+}
+
 RECT get_virtual_screen_rect(void)
 {
     RECT virtual;
diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.c
index a7fabcf860d..9511590cdb0 100644
--- a/dlls/winex11.drv/mouse.c
+++ b/dlls/winex11.drv/mouse.c
@@ -1895,6 +1895,7 @@ static BOOL map_raw_event_coords( XIRawEvent *event, INPUT *input )
         FIXME( "Unsupported relative/absolute X/Y axis mismatch\n." );

     if (input->u.mi.dwFlags & MOUSEEVENTF_VIRTUALDESK) SetRect( &virtual_rect, 0, 0, 65535, 65535 );
+    else if (wm_is_steamcompmgr( event->display )) virtual_rect = get_native_screen_rect();
     else virtual_rect = get_virtual_screen_rect();

     if (x->max <= x->min) x_scale = 1;
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 5c9dbb88aad..a3f2b5a93e3 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -743,6 +743,7 @@ extern BOOL is_window_rect_full_screen( const RECT *rect ) DECLSPEC_HIDDEN;
 extern BOOL is_window_rect_full_virtual_screen( const RECT *rect ) DECLSPEC_HIDDEN;
 extern POINT virtual_screen_to_root( INT x, INT y ) DECLSPEC_HIDDEN;
 extern POINT root_to_virtual_screen( INT x, INT y ) DECLSPEC_HIDDEN;
+extern RECT get_native_screen_rect(void) DECLSPEC_HIDDEN;
 extern RECT get_virtual_screen_rect(void) DECLSPEC_HIDDEN;
 extern RECT get_primary_monitor_rect(void) DECLSPEC_HIDDEN;
 extern RECT get_host_primary_monitor_rect(void) DECLSPEC_HIDDEN;
From 61521e371ac42b8d91b9af163bbc350bd89e0c5b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Tue, 30 Nov 2021 10:38:13 +0100
Subject: [PATCH] HACK: server: Close desktop immediately when last user is
 removed.

This should speed up prefix shutdown by 1s, making it only depend on
master socket timeout.

CW-Bug-Id: #19584
---
 server/user.h       |  1 -
 server/winstation.c | 12 ++----------
 2 files changed, 2 insertions(+), 11 deletions(-)

diff --git a/server/user.h b/server/user.h
index 3f7341a120f..a274b66383d 100644
--- a/server/user.h
+++ b/server/user.h
@@ -72,7 +72,6 @@ struct desktop
     struct window       *msg_window;       /* HWND_MESSAGE top window */
     struct hook_table   *global_hooks;     /* table of global hooks on this desktop */
     struct list          hotkeys;          /* list of registered hotkeys */
-    struct timeout_user *close_timeout;    /* timeout before closing the desktop */
     struct thread_input *foreground_input; /* thread input of foreground thread */
     unsigned int         users;            /* processes and threads using this desktop */
     struct global_cursor cursor;           /* global cursor information */
diff --git a/server/winstation.c b/server/winstation.c
index fabd892f4cc..a9b161312dd 100644
--- a/server/winstation.c
+++ b/server/winstation.c
@@ -252,7 +252,6 @@ static struct desktop *create_desktop( const struct unicode_str *name, unsigned
             desktop->top_window = NULL;
             desktop->msg_window = NULL;
             desktop->global_hooks = NULL;
-            desktop->close_timeout = NULL;
             desktop->foreground_input = NULL;
             desktop->users = 0;
             desktop->cursor_clip_msg = 0;
@@ -318,7 +317,6 @@ static void desktop_destroy( struct object *obj )
     if (desktop->top_window) destroy_window( desktop->top_window );
     if (desktop->msg_window) destroy_window( desktop->msg_window );
     if (desktop->global_hooks) release_object( desktop->global_hooks );
-    if (desktop->close_timeout) remove_timeout_user( desktop->close_timeout );
     list_remove( &desktop->entry );
     release_object( desktop->shared_mapping );
     release_object( desktop->winstation );
@@ -334,7 +332,6 @@ static void close_desktop_timeout( void *private )
 {
     struct desktop *desktop = private;

-    desktop->close_timeout = NULL;
     unlink_named_object( &desktop->obj );  /* make sure no other process can open it */
     post_desktop_message( desktop, WM_CLOSE, 0, 0 );  /* and signal the owner to quit */
 }
@@ -343,11 +340,6 @@ static void close_desktop_timeout( void *private )
 static void add_desktop_user( struct desktop *desktop )
 {
     desktop->users++;
-    if (desktop->close_timeout)
-    {
-        remove_timeout_user( desktop->close_timeout );
-        desktop->close_timeout = NULL;
-    }
 }

 /* remove a user of the desktop and start the close timeout if necessary */
@@ -358,8 +350,8 @@ static void remove_desktop_user( struct desktop *desktop )
     desktop->users--;

     /* if we have one remaining user, it has to be the manager of the desktop window */
-    if ((process = get_top_window_owner( desktop )) && desktop->users == process->running_threads && !desktop->close_timeout)
-        desktop->close_timeout = add_timeout_user( -TICKS_PER_SEC, close_desktop_timeout, desktop );
+    if ((process = get_top_window_owner( desktop )) && desktop->users == process->running_threads)
+        close_desktop_timeout( desktop );
 }

 /* set the thread default desktop handle */
From f5e6cd76159d7bcc4fc8589bbad8e163d3756c85 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Fri, 4 Feb 2022 11:34:26 +0100
Subject: [PATCH] HACK: steam: hidclass.sys: Do not send WM_INPUT messages when
 overlay is open.

So that games listening to them, such as ICEY, do not have input
bleeding through the overlay. Note that some other games, such as Hades,
which are reading the HID devices directly, have the input bleeding
through on Windows, so we do the same here.

CW-Bug-Id: #20083
---
 dlls/hidclass.sys/device.c |  7 ++++++-
 dlls/hidclass.sys/hid.h    |  6 ++++++
 dlls/hidclass.sys/pnp.c    | 12 ++++++++++++
 3 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/dlls/hidclass.sys/device.c b/dlls/hidclass.sys/device.c
index 70e1c3d12d4..a0e5e75382d 100644
--- a/dlls/hidclass.sys/device.c
+++ b/dlls/hidclass.sys/device.c
@@ -223,6 +223,7 @@ static void hid_device_queue_input( DEVICE_OBJECT *device, HID_XFER_PACKET *pack
     const BOOL polled = ext->u.pdo.information.Polled;
     ULONG size, report_len = polled ? packet->reportBufferLen : desc->InputLength;
     struct hid_report *last_report, *report;
+    BOOL steam_overlay_open = FALSE;
     struct hid_queue *queue;
     LIST_ENTRY completed, *entry;
     RAWINPUT *rawinput;
@@ -231,7 +232,11 @@ static void hid_device_queue_input( DEVICE_OBJECT *device, HID_XFER_PACKET *pack

     TRACE("device %p, packet %p\n", device, packet);

-    if (IsEqualGUID( ext->class_guid, &GUID_DEVINTERFACE_HID ))
+    if (WaitForSingleObject(ext->steam_overlay_event, 0) == WAIT_OBJECT_0 || /* steam overlay is open */
+        WaitForSingleObject(ext->steam_keyboard_event, 0) == WAIT_OBJECT_0) /* steam keyboard is open */
+        steam_overlay_open = TRUE;
+
+    if (IsEqualGUID( ext->class_guid, &GUID_DEVINTERFACE_HID ) && !steam_overlay_open)
     {
         size = offsetof( RAWINPUT, data.hid.bRawData[report_len] );
         if (!(rawinput = malloc( size ))) ERR( "Failed to allocate rawinput data!\n" );
diff --git a/dlls/hidclass.sys/hid.h b/dlls/hidclass.sys/hid.h
index e20f12809eb..042695dba63 100644
--- a/dlls/hidclass.sys/hid.h
+++ b/dlls/hidclass.sys/hid.h
@@ -83,6 +83,9 @@ typedef struct _BASE_DEVICE_EXTENSION
     WCHAR instance_id[MAX_DEVICE_ID_LEN];
     const GUID *class_guid;

+    HANDLE steam_overlay_event;
+    HANDLE steam_keyboard_event;
+
     BOOL is_fdo;
 } BASE_DEVICE_EXTENSION;

@@ -114,6 +117,9 @@ typedef struct _minidriver

     PDRIVER_ADD_DEVICE AddDevice;
     PDRIVER_DISPATCH PNPDispatch;
+
+    HANDLE steam_overlay_event;
+    HANDLE steam_keyboard_event;
 } minidriver;

 void call_minidriver( ULONG code, DEVICE_OBJECT *device, void *in_buff, ULONG in_size,
diff --git a/dlls/hidclass.sys/pnp.c b/dlls/hidclass.sys/pnp.c
index 096fe54c51b..681fafd610f 100644
--- a/dlls/hidclass.sys/pnp.c
+++ b/dlls/hidclass.sys/pnp.c
@@ -172,6 +172,9 @@ static NTSTATUS WINAPI driver_add_device(DRIVER_OBJECT *driver, DEVICE_OBJECT *b
     swprintf(ext->device_id, ARRAY_SIZE(ext->device_id), L"HID\\%s", wcsrchr(device_id, '\\') + 1);
     wcscpy(ext->instance_id, instance_id);

+    ext->steam_overlay_event = minidriver->steam_overlay_event;
+    ext->steam_keyboard_event = minidriver->steam_keyboard_event;
+
     is_xinput_class = !wcsncmp(device_id, L"WINEXINPUT\\", 7) && wcsstr(device_id, L"&XI_") != NULL;
     if (is_xinput_class) ext->class_guid = &GUID_DEVINTERFACE_WINEXINPUT;
     else ext->class_guid = &GUID_DEVINTERFACE_HID;
@@ -235,6 +238,9 @@ static void create_child(minidriver *minidriver, DEVICE_OBJECT *fdo)
     pdo_ext->u.pdo.information.VersionNumber = attr.VersionNumber;
     pdo_ext->u.pdo.information.Polled = minidriver->minidriver.DevicesArePolled;

+    pdo_ext->steam_overlay_event = minidriver->steam_overlay_event;
+    pdo_ext->steam_keyboard_event = minidriver->steam_keyboard_event;
+
     call_minidriver( IOCTL_HID_GET_DEVICE_DESCRIPTOR, fdo, NULL, 0, &descriptor, sizeof(descriptor), &io );
     if (io.Status != STATUS_SUCCESS)
     {
@@ -582,6 +588,9 @@ static void WINAPI driver_unload(DRIVER_OBJECT *driver)
         if (md->DriverUnload)
             md->DriverUnload(md->minidriver.DriverObject);
         list_remove(&md->entry);
+
+        CloseHandle(md->steam_overlay_event);
+        CloseHandle(md->steam_keyboard_event);
         free(md);
     }
 }
@@ -593,6 +602,9 @@ NTSTATUS WINAPI HidRegisterMinidriver(HID_MINIDRIVER_REGISTRATION *registration)
     if (!(driver = calloc(1, sizeof(*driver))))
         return STATUS_NO_MEMORY;

+    driver->steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+    driver->steam_keyboard_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_KeyboardActivated");
+
     driver->DriverUnload = registration->DriverObject->DriverUnload;
     registration->DriverObject->DriverUnload = driver_unload;

