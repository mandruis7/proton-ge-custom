From 76530c770cc27af5022b8d077cb7d13ca277b094 Mon Sep 17 00:00:00 2001
From: Nikolay Sivov <nsivov@codeweavers.com>
Date: Tue, 23 Oct 2018 16:18:20 +0300
Subject: [PATCH] wine.inf: Add font registry entries.

---
 loader/wine.inf.in | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index c0d600a00e3..8dfe41166c9 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -261,6 +261,7 @@ CurrentVersion="Software\Microsoft\Windows\CurrentVersion"
 FontSubStr="Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes"
 Control="System\CurrentControlSet\Control"
 Packages="Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppModel\PackageRepository\Packages"
+FontsNT="Software\Microsoft\Windows NT\CurrentVersion\Fonts"

 [Classes]
 HKCR,.chm,,2,"chm.file"
@@ -679,6 +680,10 @@ HKLM,%FontSubStr%,"Times New Roman CYR,204",,"Times New Roman,204"
 HKLM,%FontSubStr%,"Times New Roman Greek,161",,"Times New Roman,161"
 HKLM,%FontSubStr%,"Times New Roman TUR,162",,"Times New Roman,162"
 HKLM,System\CurrentControlSet\Hardware Profiles\Current\Software\Fonts,"LogPixels",0x10003,0x00000060
+HKLM,%FontsNT%,"Arial (TrueType)",,"arial.ttf"
+HKLM,%FontsNT%,"Arial Bold (TrueType)",,"arialbd.ttf"
+HKLM,%FontsNT%,"Times New Roman (TrueType)",,"times.ttf"
+HKLM,%FontsNT%,"Courier New (TrueType)",,"cour.ttf"

 [MCI]
 HKLM,%Mci32Str%,"AVIVideo",,"mciavi32.dll"
From 58cfb3d5fc97f5f418bbedea3aec084ab88eaa79 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 30 Oct 2018 13:04:06 -0500
Subject: [PATCH] wine.inf: Substitute Times New Roman for Palatino Linotype

For AOE2HD launcher.
---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 8dfe41166c9..13723f2b8dc 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -684,6 +684,7 @@ HKLM,%FontsNT%,"Arial (TrueType)",,"arial.ttf"
 HKLM,%FontsNT%,"Arial Bold (TrueType)",,"arialbd.ttf"
 HKLM,%FontsNT%,"Times New Roman (TrueType)",,"times.ttf"
 HKLM,%FontsNT%,"Courier New (TrueType)",,"cour.ttf"
+HKCU,Software\Wine\Fonts\Replacements,"Palatino Linotype",,"Times New Roman"

 [MCI]
 HKLM,%Mci32Str%,"AVIVideo",,"mciavi32.dll"
From 05899e5bac238252787f56646da16db8e6541e89 Mon Sep 17 00:00:00 2001
From: Jactry Zeng <jzeng@codeweavers.com>
Date: Thu, 13 Dec 2018 22:21:34 +0800
Subject: [PATCH] win32u: Add CJK font replacements.

---
 dlls/win32u/font.c | 143 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 143 insertions(+)

diff --git a/dlls/win32u/font.c b/dlls/win32u/font.c
index e7d2c3a13e3..bda31b0a5dd 100644
--- a/dlls/win32u/font.c
+++ b/dlls/win32u/font.c
@@ -961,6 +961,130 @@ static BOOL add_family_replacement( const WCHAR *new_name, const WCHAR *replace
     return TRUE;
 }

+/* Simplified Chinese fonts */
+static const WCHAR SimSun[] = {'S','i','m','S','u','n',0};
+static const WCHAR atSimSun[] = {'@','S','i','m','S','u','n',0};
+static const WCHAR Microsoft_YaHei[] = {'M','i','c','r','o','s','o','f','t',' ','Y','a','H','e','i',0};
+static const WCHAR LiSu[] = {'L','i','S','u',0};
+/* Traditional Chinese fonts */
+static const WCHAR PMingLiU[] = {'P','M','i','n','g','L','i','U',0};
+static const WCHAR atPMingLiU[] = {'@','P','M','i','n','g','L','i','U',0};
+/* Korean fonts */
+static const WCHAR Gulim[] = {'G','u','l','i','m',0};
+static const WCHAR atGulim[] = {'@','G','u','l','i','m',0};
+/* Japanese fonts */
+static const WCHAR MS_UI_Gothic[] = {'M','S',' ','U','I',' ','G','o','t','h','i','c',0};
+static const WCHAR atMS_UI_Gothic[] = {'@','M','S',' ','U','I',' ','G','o','t','h','i','c',0};
+
+static const WCHAR new_sc_fonts[] = {
+    /* Ubuntu 16.04 or later, Mint 19, Fedora 29 */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','S','C',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','S','C',0,
+    /* Popular open source Chinese font */
+    'W','e','n','Q','u','a','n','Y','i',' ','M','i','c','r','o',' ','H','e','i',0,
+    0
+};
+
+static const WCHAR vertical_new_sc_fonts[] = {
+    /* Ubuntu 16.04 or later, Mint 19, Fedora 29 */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','S','C',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','S','C',0,
+    /* popular open source Chinese font */
+    '@','W','e','n','Q','u','a','n','Y','i',' ','M','i','c','r','o',' ','H','e','i',0,
+    0
+};
+
+static const WCHAR new_tc_fonts[] = {
+    /* Ubuntu 16.04 or later, Mint 19, Fedora 29 */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','T','C',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','T','C',0,
+    /* popular open source Chinese font */
+    'W','e','n','Q','u','a','n','Y','i',' ','M','i','c','r','o',' ','H','e','i',0,
+    0
+};
+
+static const WCHAR vertical_new_tc_fonts[] = {
+    /* Ubuntu 16.04 or later */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','T','C',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','T','C',0,
+    /* popular open source Chinese font */
+    '@','W','e','n','Q','u','a','n','Y','i',' ','M','i','c','r','o',' ','H','e','i',0,
+    0
+};
+
+static const WCHAR new_jp_fonts[] = {
+    /* Ubuntu 16.04 or later */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','J','P',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','J','P',0,
+    0
+};
+
+static const WCHAR vertical_new_jp_fonts[] = {
+    /* Ubuntu 16.04 or later */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','J','P',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','J','P',0,
+    0
+};
+
+static const WCHAR new_kr_fonts[] = {
+    /* Ubuntu 16.04 or later */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','K','R',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    'N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','K','R',0,
+    0
+};
+
+static const WCHAR vertical_new_kr_fonts[] = {
+    /* Ubuntu 16.04 or later */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','K','R',' ','R','e','g','u','l','a','r',0,
+    /* Manjaro 18 */
+    '@','N','o','t','o',' ','S','a','n','s',' ','C','J','K',' ','K','R',0,
+    0
+};
+
+static const WCHAR MS_PGothic_cp932[]= {0x30fb,0xff6d,0x30fb,0xff73,' ',0x30fb,0xff70,0x7e67,0xff74,0x7e67,0xff77,0x7e5d,0x30fb,0x3051,0};
+
+static struct font_replacements
+{
+    const WCHAR *replacements[4];
+    const int count;
+    const WCHAR *new_fonts;
+    const WCHAR *vertical_new_fonts;
+    BOOL *font_seen;
+} font_replacements_list[] =
+{
+    /* Simplified Chinese */
+    {
+        {
+            SimSun, atSimSun, Microsoft_YaHei, LiSu
+        }, 4, new_sc_fonts, vertical_new_sc_fonts, NULL
+    },
+    /* Traditional Chinese */
+    {
+        {
+            PMingLiU, atPMingLiU
+        }, 2, new_tc_fonts, vertical_new_tc_fonts, NULL
+    },
+    /* Japanese */
+    {
+        {
+            MS_UI_Gothic, atMS_UI_Gothic, MS_PGothic_cp932
+        }, 3, new_jp_fonts, vertical_new_jp_fonts, NULL
+    },
+    /* Korean */
+    {
+        {
+            Gulim, atGulim
+        }, 2, new_kr_fonts, vertical_new_kr_fonts, NULL
+    }
+};
+
 /*
  * The replacement list is a way to map an entire font
  * family onto another family.  For example adding
@@ -991,6 +1115,25 @@ static void load_gdi_font_replacements(void)
         /* "NewName"="Oldname" */
         if (!find_family_from_any_name( value ))
         {
+            int j;
+
+            for (j = 0; j < ARRAY_SIZE(font_replacements_list); j++)
+            {
+                int k;
+
+                struct font_replacements *replacement = &font_replacements_list[j];
+
+                replacement->font_seen = calloc(1, replacement->count * sizeof(BOOL));
+                for (k = 0; k < replacement->count; k++)
+                {
+                    if (!replacement->font_seen[k] && !memcmp(value, replacement->replacements[k], sizeof(value)))
+                    {
+                        replacement->font_seen[k] = TRUE;
+                        break;
+                    }
+                }
+            }
+
             if (info->Type == REG_MULTI_SZ)
             {
                 WCHAR *replace = data;
From 7517f92a46e9303d585b3aeac116970feacd2b4a Mon Sep 17 00:00:00 2001
From: Nikolay Sivov <nsivov@codeweavers.com>
Date: Wed, 8 Mar 2017 20:15:40 +0300
Subject: [PATCH] HACK: dwrite: Don't recommend outline rendering mode

---
 dlls/dwrite/font.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/dlls/dwrite/font.c b/dlls/dwrite/font.c
index 5815c09e8ae..04bf703e003 100644
--- a/dlls/dwrite/font.c
+++ b/dlls/dwrite/font.c
@@ -1218,7 +1218,8 @@ static HRESULT WINAPI dwritefontface_GetRecommendedRenderingMode(IDWriteFontFace

     ppem = emSize * ppdip;

-    if (ppem >= RECOMMENDED_OUTLINE_AA_THRESHOLD) {
+    /* HACK: disable outline rendering mode to workaround d2d issue */
+    if (0 && ppem >= RECOMMENDED_OUTLINE_AA_THRESHOLD) {
         *mode = DWRITE_RENDERING_MODE_OUTLINE;
         return S_OK;
     }
From a64b680dd5044f174a025612c38c6b9c9b4e61cd Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Wed, 9 Dec 2020 11:45:50 +0100
Subject: [PATCH] dwrite: Add free fallback fonts for CJK.

Add two fonts which are easily found on modern Linux installations. It might
be wise to add others in the future, so that any random Linux installation
has at least one of them.

CW-Bug-Id: #18395
---
 dlls/dwrite/analyzer.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/dwrite/analyzer.c b/dlls/dwrite/analyzer.c
index 13ccf8e4434..f8d54ed7ec1 100644
--- a/dlls/dwrite/analyzer.c
+++ b/dlls/dwrite/analyzer.c
@@ -211,7 +211,7 @@ const char *debugstr_sa_script(UINT16 script)
 }

 /* system font falback configuration */
-static const WCHAR *cjk_families[] = { L"Meiryo" };
+static const WCHAR *cjk_families[] = { L"Meiryo", L"Droid Sans Fallback", L"Noto Serif CJK SC" };

 static const DWRITE_UNICODE_RANGE cjk_ranges[] =
 {
From 12dd1ae2f11fc97921aab1612a2097ee556e3fd1 Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Mon, 7 Dec 2020 19:52:23 +0100
Subject: [PATCH] dwrite: Support at least some Latin fallbacks.

CW-Bug-Id: #18395
---
 dlls/dwrite/analyzer.c | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/dlls/dwrite/analyzer.c b/dlls/dwrite/analyzer.c
index f8d54ed7ec1..097b7b26596 100644
--- a/dlls/dwrite/analyzer.c
+++ b/dlls/dwrite/analyzer.c
@@ -220,6 +220,21 @@ static const DWRITE_UNICODE_RANGE cjk_ranges[] =
     { 0x4e00, 0x9fff }, /* CJK Unified Ideographs */
 };

+static const WCHAR timesW[] = {'T','i','m','e','s',' ','N','e','w',' ','R','o','m','a','n',0};
+static const WCHAR liberationW[] = {'L','i','b','e','r','a','t','i','o','n',' ','S','e','r','i','f',0};
+static const WCHAR dejavuW[] = {'D','e','j','a','V','u',' ','S','e','r','i','f',0};
+
+static const WCHAR *latin_families[] = { timesW, liberationW, dejavuW };
+
+static const DWRITE_UNICODE_RANGE latin_ranges[] =
+{
+    { 0x0000, 0x05ff },
+    { 0x1d00, 0x2eff },
+    { 0xa700, 0xa7ff },
+    { 0xfb00, 0xfb4f },
+    { 0xfe20, 0xfe23 },
+};
+
 struct fallback_mapping {
     DWRITE_UNICODE_RANGE *ranges;
     UINT32 ranges_count;
@@ -236,6 +251,7 @@ static const struct fallback_mapping fontfallback_neutral_data[] = {
           (WCHAR **)families, ARRAY_SIZE(families) }

     MAPPING_RANGE(cjk_ranges, cjk_families),
+    MAPPING_RANGE(latin_ranges, latin_families),

 #undef MAPPING_RANGE
 };
From 8e476aafc2c965056f815ff0ea84739769cf67b9 Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Fri, 4 Dec 2020 12:07:30 +0100
Subject: [PATCH] dwrite: Search more generously for font fallbacks.

CW-Bug-Id: #18395
---
 dlls/dwrite/analyzer.c | 57 ++++++++++++++++++++++++------------------
 1 file changed, 32 insertions(+), 25 deletions(-)

diff --git a/dlls/dwrite/analyzer.c b/dlls/dwrite/analyzer.c
index 097b7b26596..df68ba869b4 100644
--- a/dlls/dwrite/analyzer.c
+++ b/dlls/dwrite/analyzer.c
@@ -2096,7 +2096,7 @@ static HRESULT fallback_map_characters(IDWriteFont *font, const WCHAR *text, UIN
         /* stop on first unsupported character */
         exists = FALSE;
         hr = IDWriteFont_HasCharacter(font, text[i], &exists);
-        if (hr == S_OK && exists)
+        if (SUCCEEDED(hr) && exists)
             ++*mapped_length;
         else
             break;
@@ -2114,11 +2114,12 @@ static HRESULT fallback_get_fallback_font(struct dwrite_fontfallback *fallback,
     UINT32 i;

     *mapped_font = NULL;
+    *mapped_length = 0;

     mapping = find_fallback_mapping(fallback, text[0]);
     if (!mapping) {
         WARN("No mapping range for %#x.\n", text[0]);
-        return E_FAIL;
+        return S_OK;
     }

     /* Now let's see what fallback can handle. Pick first font that could be created. */
@@ -2133,19 +2134,18 @@ static HRESULT fallback_get_fallback_font(struct dwrite_fontfallback *fallback,

     if (!*mapped_font) {
         WARN("Failed to create fallback font.\n");
-        return E_FAIL;
+        return S_OK;
     }

     hr = fallback_map_characters(*mapped_font, text, length, mapped_length);
-    if (FAILED(hr))
-        WARN("Mapping with fallback family %s failed, hr %#lx.\n", debugstr_w(mapping->families[i]), hr);

     if (!*mapped_length) {
+        WARN("Mapping with fallback family %s failed.\n", debugstr_w(mapping->families[i]));
         IDWriteFont_Release(*mapped_font);
         *mapped_font = NULL;
     }

-    return *mapped_length ? S_OK : E_FAIL;
+    return hr;
 }

 static HRESULT WINAPI fontfallback_MapCharacters(IDWriteFontFallback1 *iface, IDWriteTextAnalysisSource *source,
@@ -2180,30 +2180,37 @@ static HRESULT WINAPI fontfallback_MapCharacters(IDWriteFontFallback1 *iface, ID

     if (basefamily && *basefamily) {
         hr = create_matching_font(basecollection, basefamily, weight, style, stretch, ret_font);
-        if (FAILED(hr))
-            goto done;

-        hr = fallback_map_characters(*ret_font, text, length, mapped_length);
-        if (FAILED(hr))
-            goto done;
+        /* It is not a fatal error for create_matching_font to
+           fail. We still have other fallbacks to try. */
+
+        if (SUCCEEDED(hr))
+        {
+            hr = fallback_map_characters(*ret_font, text, length, mapped_length);
+            if (FAILED(hr))
+                goto done;
+        }
     }

     if (!*mapped_length) {
-        IDWriteFont *mapped_font;
-
-        hr = fallback_get_fallback_font(fallback, text, length, weight, style, stretch, mapped_length, &mapped_font);
-        if (FAILED(hr)) {
-            /* fallback wasn't found, keep base font if any, so we can get at least some visual output */
-            if (*ret_font) {
-                *mapped_length = length;
-                hr = S_OK;
-            }
-        }
-        else {
-            if (*ret_font)
-                IDWriteFont_Release(*ret_font);
-            *ret_font = mapped_font;
+        if (*ret_font)
+        {
+            IDWriteFont_Release(*ret_font);
+            *ret_font = NULL;
         }
+
+        hr = fallback_get_fallback_font(fallback, text, length, weight, style, stretch, mapped_length, ret_font);
+        if (FAILED(hr))
+            goto done;
+    }
+
+    if (!*mapped_length)
+    {
+        /* fallback wasn't found, ask the caller to skip one character
+           and try again; FIXME: skip the appropriate number of
+           characters instead of just one */
+        *mapped_length = 1;
+        hr = S_OK;
     }

 done:
From 858a668e52c56d0a8ce3edf9e357e441e30746df Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Thu, 24 Jun 2021 17:27:08 +0200
Subject: [PATCH] HACK: gdi32/font: Do font linking for Arial too.

This helps the Rockstar installer to fallback to appropriate fonts
for CJK languages.

For Rockstar installer font support.

CW-Bug-Id: #18969
---
 dlls/win32u/font.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/dlls/win32u/font.c b/dlls/win32u/font.c
index bda31b0a5dd..be374584282 100644
--- a/dlls/win32u/font.c
+++ b/dlls/win32u/font.c
@@ -1684,6 +1684,8 @@ static const WCHAR p_ming_li_uW[] =
     {'P','M','i','n','g','L','i','U',0};
 static const WCHAR batangW[] =
     {'B','a','t','a','n','g',0};
+static const WCHAR arialW[] =
+    {'A','r','i','a','l',0};

 static const WCHAR * const font_links_list[] =
 {
@@ -2879,6 +2881,7 @@ static void update_font_system_link_info(UINT current_ansi_codepage)
         set_multi_value_key(hkey, lucida_sans_unicodeW, link, len);
         set_multi_value_key(hkey, microsoft_sans_serifW, link, len);
         set_multi_value_key(hkey, tahomaW, link, len);
+        set_multi_value_key(hkey, arialW, link, len);
         NtClose( hkey );
     }
 }
@@ -2909,7 +2912,13 @@ static void update_codepage( UINT screen_dpi )
     if (query_reg_ascii_value( wine_fonts_key, "Codepages", info, sizeof(value_buffer) ))
     {
         cp_match = !wcscmp( (const WCHAR *)info->Data, cpbufW );
-        if (cp_match && screen_dpi == font_dpi) return;  /* already set correctly */
+        if (cp_match && screen_dpi == font_dpi)
+        {
+            /* already set correctly, but, as a HACK, update font link
+               info anyway, so that old Proton prefixes are fixed */
+            update_font_system_link_info(ansi_cp);
+            return;
+        }
         TRACE( "updating registry, codepages/logpixels changed %s/%u -> %u,%u/%u\n",
                debugstr_w((const WCHAR *)info->Data), font_dpi, ansi_cp, oem_cp, screen_dpi );
     }
From 6a311289cf8a45a64d6324355e935328276f1a15 Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Fri, 1 Oct 2021 12:05:09 +0200
Subject: [PATCH] HACK: dwrite: Fix font mappings for the Cyberpunk 2077
 installer.

This was first reported at
https://github.com/ValveSoftware/Proton/issues/4450#issuecomment-882996582.

For Cyberpunk 2077 launcher font support.

CW-Bug-Id: #19125
---
 dlls/dwrite/analyzer.c | 27 ++++++++++++++++++++++++++-
 1 file changed, 26 insertions(+), 1 deletion(-)

diff --git a/dlls/dwrite/analyzer.c b/dlls/dwrite/analyzer.c
index df68ba869b4..a59f3930ce4 100644
--- a/dlls/dwrite/analyzer.c
+++ b/dlls/dwrite/analyzer.c
@@ -211,7 +211,7 @@ const char *debugstr_sa_script(UINT16 script)
 }

 /* system font falback configuration */
-static const WCHAR *cjk_families[] = { L"Meiryo", L"Droid Sans Fallback", L"Noto Serif CJK SC" };
+static const WCHAR *cjk_families[] = { L"SimSun", L"Meiryo", L"Droid Sans Fallback", L"Noto Serif CJK SC" };

 static const DWRITE_UNICODE_RANGE cjk_ranges[] =
 {
@@ -220,6 +220,16 @@ static const DWRITE_UNICODE_RANGE cjk_ranges[] =
     { 0x4e00, 0x9fff }, /* CJK Unified Ideographs */
 };

+static const WCHAR *hangul_families[] = { L"Malgun Gothic" };
+
+static const DWRITE_UNICODE_RANGE hangul_ranges[] =
+{
+    { 0x1100, 0x11ff }, /* Hangul Jamo */
+    { 0x3130, 0x318f }, /* Hangul Compatibility Jamo */
+    { 0xa960, 0xa97f }, /* Hangul Jamo Extended-A */
+    { 0xac00, 0xd7ff }, /* Hangul Syllables, Hangul Jamo Extended-B */
+};
+
 static const WCHAR timesW[] = {'T','i','m','e','s',' ','N','e','w',' ','R','o','m','a','n',0};
 static const WCHAR liberationW[] = {'L','i','b','e','r','a','t','i','o','n',' ','S','e','r','i','f',0};
 static const WCHAR dejavuW[] = {'D','e','j','a','V','u',' ','S','e','r','i','f',0};
@@ -235,6 +245,19 @@ static const DWRITE_UNICODE_RANGE latin_ranges[] =
     { 0xfe20, 0xfe23 },
 };

+static const WCHAR microsoft_sans_serifW[] = {'M','i','c','r','o','s','o','f','t',' ','S','a','n','s',' ','S','e','r','i','f',0};
+
+static const WCHAR *arabic_families[] = { microsoft_sans_serifW };
+
+static const DWRITE_UNICODE_RANGE arabic_ranges[] =
+{
+    { 0x0600, 0x06ff }, /* Arabic */
+    { 0x0750, 0x077f }, /* Arabic Supplement */
+    { 0x08a0, 0x08ff }, /* Arabic Extended-A */
+    { 0xfb50, 0xfdff }, /* Arabic Presentation Forms-A */
+    { 0xfe70, 0xfeff }, /* Arabic Presentation Forms-B */
+};
+
 struct fallback_mapping {
     DWRITE_UNICODE_RANGE *ranges;
     UINT32 ranges_count;
@@ -251,7 +274,9 @@ static const struct fallback_mapping fontfallback_neutral_data[] = {
           (WCHAR **)families, ARRAY_SIZE(families) }

     MAPPING_RANGE(cjk_ranges, cjk_families),
+    MAPPING_RANGE(hangul_ranges, hangul_families),
     MAPPING_RANGE(latin_ranges, latin_families),
+    MAPPING_RANGE(arabic_ranges, arabic_families),

 #undef MAPPING_RANGE
 };
From 3dec8c6c6ad03b7d1ef89d1d75f7e6c4e2ee3017 Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Tue, 10 Aug 2021 11:56:55 +0200
Subject: [PATCH] HACK: loader/wine.inf: Add registry entries for the new
 fonts.

They are required for DWrite to enumerate the fonts.

For Cyberpunk 2077 launcher font support.

CW-Bug-Id: #19125
---
 loader/wine.inf.in | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 13723f2b8dc..2dcf73380ef 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -684,6 +684,10 @@ HKLM,%FontsNT%,"Arial (TrueType)",,"arial.ttf"
 HKLM,%FontsNT%,"Arial Bold (TrueType)",,"arialbd.ttf"
 HKLM,%FontsNT%,"Times New Roman (TrueType)",,"times.ttf"
 HKLM,%FontsNT%,"Courier New (TrueType)",,"cour.ttf"
+HKLM,%FontsNT%,"Malgun Gothic (TrueType)",,"malgun.ttf"
+HKLM,%FontsNT%,"Microsoft YaHei (TrueType)",,"msyh.ttf"
+HKLM,%FontsNT%,"MS Gothic (TrueType)",,"msgothic.ttc"
+HKLM,%FontsNT%,"SimSun (TrueType)",,"simsun.ttc"
 HKCU,Software\Wine\Fonts\Replacements,"Palatino Linotype",,"Times New Roman"

 [MCI]
From e929662ceb5c88d5c68f040e4636b7be44f07a4e Mon Sep 17 00:00:00 2001
From: Jactry Zeng <jzeng@codeweavers.com>
Date: Sun, 26 Sep 2021 14:58:45 +0800
Subject: [PATCH] loader/wine.inf: Add registry entries for Microsoft Sans
 Serif (micross.ttf) and Nirmala UI (nirmala.ttf).

CW-Bug-Id: #17132
---
 loader/wine.inf.in | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 2dcf73380ef..d9ad8a63fdb 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -685,8 +685,10 @@ HKLM,%FontsNT%,"Arial Bold (TrueType)",,"arialbd.ttf"
 HKLM,%FontsNT%,"Times New Roman (TrueType)",,"times.ttf"
 HKLM,%FontsNT%,"Courier New (TrueType)",,"cour.ttf"
 HKLM,%FontsNT%,"Malgun Gothic (TrueType)",,"malgun.ttf"
+HKLM,%FontsNT%,"Microsoft Sans Serif (TrueType)",,"micross.ttf"
 HKLM,%FontsNT%,"Microsoft YaHei (TrueType)",,"msyh.ttf"
 HKLM,%FontsNT%,"MS Gothic (TrueType)",,"msgothic.ttc"
+HKLM,%FontsNT%,"Nirmala UI (TrueType)",,"nirmala.ttf"
 HKLM,%FontsNT%,"SimSun (TrueType)",,"simsun.ttc"
 HKCU,Software\Wine\Fonts\Replacements,"Palatino Linotype",,"Times New Roman"

From 06ef8f2a913dcd776a80ae54c6df5d54a2f731f7 Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Wed, 12 Jan 2022 13:03:28 +0100
Subject: [PATCH] HACK: win32u/font: Add other font linking entries.

They improve CJK rendering for the Rockstar Launcher.

CW-Bug-Id: #19917
---
 dlls/win32u/font.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/dlls/win32u/font.c b/dlls/win32u/font.c
index be374584282..46dff27d55b 100644
--- a/dlls/win32u/font.c
+++ b/dlls/win32u/font.c
@@ -1686,6 +1686,12 @@ static const WCHAR batangW[] =
     {'B','a','t','a','n','g',0};
 static const WCHAR arialW[] =
     {'A','r','i','a','l',0};
+static const WCHAR arial_boldW[] =
+    {'A','r','i','a','l',' ','B','o','l','d',0};
+static const WCHAR courier_newW[] =
+    {'C','o','u','r','i','e','r',' ','N','e','w',0};
+static const WCHAR courier_new_boldW[] =
+    {'C','o','u','r','i','e','r',' ','N','e','w',' ','B','o','l','d',0};

 static const WCHAR * const font_links_list[] =
 {
@@ -2882,6 +2888,9 @@ static void update_font_system_link_info(UINT current_ansi_codepage)
         set_multi_value_key(hkey, microsoft_sans_serifW, link, len);
         set_multi_value_key(hkey, tahomaW, link, len);
         set_multi_value_key(hkey, arialW, link, len);
+        set_multi_value_key(hkey, arial_boldW, link, len);
+        set_multi_value_key(hkey, courier_newW, link, len);
+        set_multi_value_key(hkey, courier_new_boldW, link, len);
         NtClose( hkey );
     }
 }
From f095d59170ab2f71c5fd5c91ec02f5d89692ff15 Mon Sep 17 00:00:00 2001
From: Giovanni Mascellani <gmascellani@codeweavers.com>
Date: Fri, 14 Jan 2022 09:46:20 +0100
Subject: [PATCH] HACK: riched20: Ignore WM_SETFONT for Grand Theft Auto V.

CW-Bug-Id: #19917
---
 dlls/riched20/editor.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/dlls/riched20/editor.c b/dlls/riched20/editor.c
index 429f023ebe4..6a2c7c0748f 100644
--- a/dlls/riched20/editor.c
+++ b/dlls/riched20/editor.c
@@ -3570,6 +3570,20 @@ LRESULT editor_handle_message( ME_TextEditor *editor, UINT msg, WPARAM wParam,
     CHARFORMAT2W fmt;
     HDC hDC;
     BOOL bRepaint = LOWORD(lParam);
+    const char *sgi = getenv("STEAM_COMPAT_APP_ID");
+
+    /* Grand Theft Auto V installer tries to set font for license
+     * richedit to Arial, which breaks CJK languages. Given that the
+     * RTF already has reasonable fonts set, we can just ignore the
+     * message. This can be removed once our richedit is able to do
+     * font substitution properly. CW bug #19917.
+     *
+     * It's important that STEAM_COMPAT_APP_ID environment variable is
+     * used instead of the usual SteamGameId, because the latter is
+     * not available during the configuration stage, when the
+     * installer is run. */
+    if (sgi && strcmp(sgi, "271590") == 0)
+        return 0;

     if (!wParam)
       wParam = (WPARAM)GetStockObject(SYSTEM_FONT);
