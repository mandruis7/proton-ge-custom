From 7b8610676e3cb0e614fa7b960a999b00c3b14b6b Mon Sep 17 00:00:00 2001
From: Philipp Richter <richterphilipp.pops@gmail.com>
Date: Mon, 21 Feb 2022 13:55:40 +0100
Subject: [PATCH] mfplat: workaround for "The Good Life (1452500)" due to
 missing "http:" scheme implementation

"The Good Life (1452500)" wants to load its video files over http: but
that fails due to the missing implementation in wine.

This workaround pulls the Content-Length from the response headers and
attempts to match the right file in the game folder to serve it using
the "file:" scheme.

See: https://github.com/ValveSoftware/Proton/issues/5195
---
 dlls/mfplat/Makefile.in |   2 +-
 dlls/mfplat/main.c      | 204 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 205 insertions(+), 1 deletion(-)

diff --git a/dlls/mfplat/Makefile.in b/dlls/mfplat/Makefile.in
index 4515d652c58..683127545d6 100644
--- a/dlls/mfplat/Makefile.in
+++ b/dlls/mfplat/Makefile.in
@@ -1,6 +1,6 @@
 MODULE    = mfplat.dll
 IMPORTLIB = mfplat
-IMPORTS   = advapi32 ole32 mfuuid propsys rtworkq kernelbase
+IMPORTS   = advapi32 ole32 mfuuid propsys rtworkq kernelbase wininet
 DELAYIMPORTS = bcrypt
 
 EXTRADLLFLAGS = -Wb,--prefer-native
diff --git a/dlls/mfplat/main.c b/dlls/mfplat/main.c
index 7991152f7a7..e1ff0bf2312 100644
--- a/dlls/mfplat/main.c
+++ b/dlls/mfplat/main.c
@@ -54,6 +54,7 @@
 
 #include "bcrypt.h"
 #include "pathcch.h"
+#include "wininet.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(mfplat);
 
@@ -6586,6 +6587,201 @@ static ULONG WINAPI source_resolver_Release(IMFSourceResolver *iface)
     return refcount;
 }
 
+/*
+ * Applies The Good Life (1452500) workaround for http: scheme urls
+ * Retrieves the Content-Length response header from the http request
+ * and matches it with the game files to find the direct path
+ * temp_buffer should be PATHCCH_MAX_CCH characters long for extended path support
+ * the new url will be placed into temp_buffer
+ */
+static BOOL thegoodlife_workaround_url_matcher(const WCHAR *url, WCHAR *temp_buffer, DWORD temp_buffer_size)
+{
+    static const WCHAR* acccept_types[] = { L"*/*", NULL };
+    URL_COMPONENTSW url_comp;
+    HINTERNET hinternet, hconnect, hrequest;
+    WCHAR content_length[24];
+    DWORD content_length_size;
+    WIN32_FIND_DATAW find_file_data;
+    HANDLE hfind;
+    DWORDLONG size, file_size;
+    content_length_size = sizeof(content_length);
+
+    memset(&url_comp, 0, sizeof(URL_COMPONENTSW));
+    url_comp.dwStructSize = sizeof(URL_COMPONENTSW);
+    url_comp.dwHostNameLength = 1;
+    url_comp.dwUserNameLength = 1;
+    url_comp.dwPasswordLength = 1;
+    url_comp.dwUrlPathLength = 1;
+    url_comp.dwExtraInfoLength = 1;
+
+    if (!(InternetCrackUrlW(url, lstrlenW(url), 0, &url_comp)))
+    {
+        WARN("InternetCrackUrlW failed: %u\n", GetLastError());
+        return FALSE;
+    }
+
+    /* write 0 terminated components into the temp_buffer */
+    if ((url_comp.dwHostNameLength + 1 +
+        url_comp.dwUserNameLength + 1 +
+        url_comp.dwPasswordLength + 1 +
+        url_comp.dwUrlPathLength + url_comp.dwExtraInfoLength + 1) > temp_buffer_size)
+    {
+        WARN("temp_buffer is too small\n");
+        return FALSE;
+    }
+
+    url_comp.lpszHostName = memcpy(temp_buffer, url_comp.lpszHostName, url_comp.dwHostNameLength * sizeof(WCHAR));
+    url_comp.lpszHostName[url_comp.dwHostNameLength] = 0;
+    url_comp.lpszUserName = memcpy(url_comp.lpszHostName + url_comp.dwHostNameLength + 1, url_comp.lpszUserName,
+        url_comp.dwUserNameLength * sizeof(WCHAR));
+    url_comp.lpszUserName[url_comp.dwUserNameLength] = 0;
+    url_comp.lpszPassword = memcpy(url_comp.lpszUserName + url_comp.dwUserNameLength + 1, url_comp.lpszPassword,
+        url_comp.dwPasswordLength * sizeof(WCHAR));
+    url_comp.lpszPassword[url_comp.dwPasswordLength] = 0;
+    url_comp.lpszUrlPath = memcpy(url_comp.lpszPassword + url_comp.dwPasswordLength + 1, url_comp.lpszUrlPath,
+        (url_comp.dwUrlPathLength + url_comp.dwExtraInfoLength) * sizeof(WCHAR));
+    url_comp.lpszUrlPath[url_comp.dwUrlPathLength + url_comp.dwExtraInfoLength] = 0;
+
+    if (!(hinternet = InternetOpenW(L"wininet", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0)))
+    {
+        WARN("InternetOpenW failed: %u\n", GetLastError());
+        return FALSE;
+    }
+
+    if (!(hconnect = InternetConnectW(hinternet, url_comp.lpszHostName, url_comp.nPort,
+        url_comp.lpszUserName, url_comp.lpszPassword, INTERNET_SERVICE_HTTP, 0, 0)))
+    {
+        WARN("InternetConnectW failed: %u\n", GetLastError());
+        InternetCloseHandle(hinternet);
+        return FALSE;
+    }
+
+    if (!(hrequest = HttpOpenRequestW(hconnect, L"GET", url_comp.lpszUrlPath,
+        NULL, NULL,
+        acccept_types,
+        INTERNET_FLAG_NO_CACHE_WRITE|INTERNET_FLAG_NO_COOKIES|INTERNET_FLAG_NO_UI|INTERNET_FLAG_RELOAD, 0)))
+    {
+        WARN("HttpOpenRequestW failed: %u\n", GetLastError());
+        InternetCloseHandle(hconnect);
+        InternetCloseHandle(hinternet);
+        return FALSE;
+    }
+
+    if (!HttpSendRequestW(hrequest, NULL, 0, NULL, 0))
+    {
+        WARN("HttpSendRequestW failed: %u\n", GetLastError());
+        InternetCloseHandle(hrequest);
+        InternetCloseHandle(hconnect);
+        InternetCloseHandle(hinternet);
+        return FALSE;
+    }
+
+    if (!HttpQueryInfoW(hrequest, HTTP_QUERY_CONTENT_LENGTH, content_length, &content_length_size, NULL))
+    {
+        WARN("HttpQueryInfoW failed: %u\n", GetLastError());
+        InternetCloseHandle(hrequest);
+        InternetCloseHandle(hconnect);
+        InternetCloseHandle(hinternet);
+        return FALSE;
+    }
+
+    InternetCloseHandle(hrequest);
+    InternetCloseHandle(hconnect);
+    InternetCloseHandle(hinternet);
+
+    if (!content_length_size)
+    {
+        WARN("Content-Length could not be retrieved\n");
+        return FALSE;
+    }
+
+    size = wcstoul(content_length, NULL, 10);
+
+    if (!size)
+        return FALSE;
+
+    /* Retrieve the current running application path */
+    if (!GetModuleFileNameW(NULL, temp_buffer, temp_buffer_size))
+    {
+        WARN("GetModuleFileNameW failed: %u\n", GetLastError());
+        return FALSE;
+    }
+
+    PathCchRemoveFileSpec(temp_buffer, temp_buffer_size);
+    PathCchAppendEx(temp_buffer, temp_buffer_size, L"StandaloneWindows64_Data\\StreamingAssets\\*",
+        PATHCCH_ALLOW_LONG_PATHS);
+
+    if ((hfind = FindFirstFileExW(temp_buffer, FindExInfoBasic, &find_file_data,
+        FindExSearchNameMatch, NULL, 0)) == INVALID_HANDLE_VALUE)
+    {
+        WARN("FindFirstFileExW failed: %u\n", GetLastError());
+        return FALSE;
+    }
+
+    do
+    {
+        if (find_file_data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
+            continue;
+        if (find_file_data.nFileSizeHigh > 0)
+            file_size = (find_file_data.nFileSizeHigh * (MAXDWORD+1)) + find_file_data.nFileSizeLow;
+        else
+            file_size = find_file_data.nFileSizeLow;
+        if (file_size != size)
+            continue;
+        PathCchRemoveFileSpec(temp_buffer, temp_buffer_size);
+        PathCchAppendEx(temp_buffer, temp_buffer_size, find_file_data.cFileName,
+            PATHCCH_ALLOW_LONG_PATHS);
+        FindClose(hfind);
+        return TRUE;
+    }
+    while (FindNextFileW(hfind, &find_file_data));
+    if (GetLastError() != ERROR_NO_MORE_FILES)
+    {
+        WARN("FindNextFileW failed: %u\n", GetLastError());
+    }
+    FindClose(hfind);
+
+    return FALSE;
+}
+
+/*
+ * Tests if The Good Life (1452500) workaround needs to be applied
+ * temp_buffer should be PATHCCH_MAX_CCH characters long for extended path support
+ */
+static BOOL thegoodlife_workaround_scheme_check(const WCHAR *url, WCHAR *temp_buffer, DWORD temp_buffer_size)
+{
+    if (!url || lstrlenW(url) < 5 || memcmp(url, L"http:", sizeof(WCHAR) * 5))
+        return FALSE;
+
+    /* Retrieve the current running application path */
+    if (!GetModuleFileNameW(NULL, temp_buffer, temp_buffer_size))
+    {
+        WARN("GetModuleFileNameW failed: %u\n", GetLastError());
+        return FALSE;
+    }
+
+    PathCchRemoveFileSpec(temp_buffer, temp_buffer_size);
+    PathCchAppendEx(temp_buffer, temp_buffer_size, L"StandaloneWindows64_Data\\StreamingAssets",
+        PATHCCH_ALLOW_LONG_PATHS);
+    return PathFileExistsW(temp_buffer);
+}
+
+/* The Good Life (1452500) workaround macro */
+#define TGL_WORKAROUND(url) \
+    WCHAR __tgl_workaround_buffer[PATHCCH_MAX_CCH]; \
+    if (thegoodlife_workaround_scheme_check(url, __tgl_workaround_buffer, PATHCCH_MAX_CCH)) \
+    { \
+        TRACE("Applying The Good Life (1452500) workaround to %s.\n", debugstr_w(url)); \
+        if (!thegoodlife_workaround_url_matcher(url, __tgl_workaround_buffer, PATHCCH_MAX_CCH)) \
+        { \
+            WARN("Applying The Good Life (1452500) workaround to %s failed.\n", debugstr_w(url)); \
+        } \
+        else \
+        { \
+            url = __tgl_workaround_buffer; \
+        } \
+    }
+
 static HRESULT WINAPI source_resolver_CreateObjectFromURL(IMFSourceResolver *iface, const WCHAR *url,
         DWORD flags, IPropertyStore *props, MF_OBJECT_TYPE *obj_type, IUnknown **object)
 {
@@ -6594,6 +6790,8 @@ static HRESULT WINAPI source_resolver_CreateObjectFromURL(IMFSourceResolver *ifa
     IRtwqAsyncResult *result;
     RTWQASYNCRESULT *data;
     HRESULT hr;
+    /* The Good Life (1452500) workaround */
+    TGL_WORKAROUND(url)
 
     TRACE("%p, %s, %#lx, %p, %p, %p.\n", iface, debugstr_w(url), flags, props, obj_type, object);
 
@@ -6635,6 +6833,8 @@ static HRESULT WINAPI source_resolver_CreateObjectFromByteStream(IMFSourceResolv
     IRtwqAsyncResult *result;
     RTWQASYNCRESULT *data;
     HRESULT hr;
+    /* The Good Life (1452500) workaround */
+    TGL_WORKAROUND(url)
 
     TRACE("%p, %p, %s, %#lx, %p, %p, %p.\n", iface, stream, debugstr_w(url), flags, props, obj_type, object);
 
@@ -6676,6 +6876,8 @@ static HRESULT WINAPI source_resolver_BeginCreateObjectFromURL(IMFSourceResolver
     IUnknown *inner_cookie = NULL;
     IRtwqAsyncResult *result;
     HRESULT hr;
+    /* The Good Life (1452500) workaround */
+    TGL_WORKAROUND(url)
 
     TRACE("%p, %s, %#lx, %p, %p, %p, %p.\n", iface, debugstr_w(url), flags, props, cancel_cookie, callback, state);
 
@@ -6720,6 +6922,8 @@ static HRESULT WINAPI source_resolver_BeginCreateObjectFromByteStream(IMFSourceR
     IUnknown *inner_cookie = NULL;
     IRtwqAsyncResult *result;
     HRESULT hr;
+    /* The Good Life (1452500) workaround */
+    TGL_WORKAROUND(url)
 
     TRACE("%p, %p, %s, %#lx, %p, %p, %p, %p.\n", iface, stream, debugstr_w(url), flags, props, cancel_cookie,
             callback, state);
-- 
2.35.1

