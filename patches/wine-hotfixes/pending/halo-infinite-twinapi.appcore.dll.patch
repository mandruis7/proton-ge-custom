From 1d0ba2bd205ecff473b253135147719046c692ca Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Tue, 2 Nov 2021 18:20:25 -0700
Subject: [PATCH] xinputuap.dll: Add DLL.

Based on a patch by Yusuf Khan <yusisamerican@gmail.com>.

CW-Bug-Id: #19649

For Halo Infinite.
---
 configure.ac                  |  1 +
 dlls/xinputuap/Makefile.in    |  8 ++++++++
 dlls/xinputuap/version.rc     | 27 +++++++++++++++++++++++++++
 dlls/xinputuap/xinputuap.spec |  8 ++++++++
 4 files changed, 44 insertions(+)
 create mode 100644 dlls/xinputuap/Makefile.in
 create mode 100644 dlls/xinputuap/version.rc
 create mode 100644 dlls/xinputuap/xinputuap.spec

diff --git a/configure.ac b/configure.ac
index ea5f35d6a7d..43a9e7946b1 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3524,6 +3524,7 @@ WINE_CONFIG_MAKEFILE(dlls/xinput1_3)
 WINE_CONFIG_MAKEFILE(dlls/xinput1_3/tests)
 WINE_CONFIG_MAKEFILE(dlls/xinput1_4)
 WINE_CONFIG_MAKEFILE(dlls/xinput9_1_0)
+WINE_CONFIG_MAKEFILE(dlls/xinputuap)
 WINE_CONFIG_MAKEFILE(dlls/xmllite)
 WINE_CONFIG_MAKEFILE(dlls/xmllite/tests)
 WINE_CONFIG_MAKEFILE(dlls/xolehlp)
diff --git a/dlls/xinputuap/Makefile.in b/dlls/xinputuap/Makefile.in
new file mode 100644
index 00000000000..5d311fe7c31
--- /dev/null
+++ b/dlls/xinputuap/Makefile.in
@@ -0,0 +1,8 @@
+MODULE    = xinputuap.dll
+IMPORTS   = hid setupapi advapi32 user32
+PARENTSRC = ../xinput1_3
+
+C_SRCS = \
+	main.c
+
+RC_SRCS = version.rc
diff --git a/dlls/xinputuap/version.rc b/dlls/xinputuap/version.rc
new file mode 100644
index 00000000000..f16ae7b6880
--- /dev/null
+++ b/dlls/xinputuap/version.rc
@@ -0,0 +1,27 @@
+/*
+ * The Wine project - Xinput Joystick Library
+ * Copyright 2021 Yusuf Khan
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#define WINE_FILEDESCRIPTION_STR "Wine Common Controller API"
+#define WINE_FILENAME_STR "xinputuap.dll"
+#define WINE_FILEVERSION 10,0,14393,0000
+#define WINE_FILEVERSION_STR "10.0.14393.0000"
+#define WINE_PRODUCTVERSION 10,0,14393,0000
+#define WINE_PRODUCTVERSION_STR "10.0"
+
+#include "wine/wine_common_ver.rc"
diff --git a/dlls/xinputuap/xinputuap.spec b/dlls/xinputuap/xinputuap.spec
new file mode 100644
index 00000000000..6ecf5415b91
--- /dev/null
+++ b/dlls/xinputuap/xinputuap.spec
@@ -0,0 +1,8 @@
+1 stdcall -private DllMain(long long ptr)
+2 stdcall XInputGetState(long ptr)
+3 stdcall XInputSetState(long ptr)
+4 stdcall XInputGetCapabilities(long long ptr)
+5 stdcall XInputEnable(long)
+7 stdcall XInputGetBatteryInformation(long long ptr)
+8 stdcall XInputGetKeystroke(long long ptr)
+100 stdcall XInputGetStateEx(long ptr)
From df886d4729dbcd691bf425ed1929d43f9f897b0e Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 17 Nov 2021 19:34:29 +0300
Subject: [PATCH] twinapi.appcore.dll: Stub DLL.

CW-Bug-Id: #19649
---
 configure.ac                                  |   1 +
 dlls/twinapi.appcore.dll/Makefile.in          |   5 +
 dlls/twinapi.appcore.dll/main.c               | 157 ++++++++++++++++++
 dlls/twinapi.appcore.dll/twinapi.appcore.spec |   3 +
 4 files changed, 166 insertions(+)
 create mode 100644 dlls/twinapi.appcore.dll/Makefile.in
 create mode 100644 dlls/twinapi.appcore.dll/main.c
 create mode 100644 dlls/twinapi.appcore.dll/twinapi.appcore.spec

diff --git a/configure.ac b/configure.ac
index 43a9e7946b1..9122a72353e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3318,6 +3318,7 @@ WINE_CONFIG_MAKEFILE(dlls/twain.dll16,enable_win16)
 WINE_CONFIG_MAKEFILE(dlls/twain_32)
 WINE_CONFIG_MAKEFILE(dlls/twain_32/tests)
 WINE_CONFIG_MAKEFILE(dlls/typelib.dll16,enable_win16)
+WINE_CONFIG_MAKEFILE(dlls/twinapi.appcore.dll)
 WINE_CONFIG_MAKEFILE(dlls/tzres)
 WINE_CONFIG_MAKEFILE(dlls/ucrtbase)
 WINE_CONFIG_MAKEFILE(dlls/ucrtbase/tests)
diff --git a/dlls/twinapi.appcore.dll/Makefile.in b/dlls/twinapi.appcore.dll/Makefile.in
new file mode 100644
index 00000000000..b96bd5ff03e
--- /dev/null
+++ b/dlls/twinapi.appcore.dll/Makefile.in
@@ -0,0 +1,5 @@
+MODULE = twinapi.appcore.dll
+IMPORTS = combase
+
+C_SRCS = \
+       main.c
diff --git a/dlls/twinapi.appcore.dll/main.c b/dlls/twinapi.appcore.dll/main.c
new file mode 100644
index 00000000000..9de8b65f945
--- /dev/null
+++ b/dlls/twinapi.appcore.dll/main.c
@@ -0,0 +1,157 @@
+/*
+ * Copyright 2021 Paul Gofman for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <stdarg.h>
+
+#define COBJMACROS
+#include "initguid.h"
+#include "windef.h"
+#include "winbase.h"
+#include "winstring.h"
+#include "wine/debug.h"
+#include "objbase.h"
+
+#include "activation.h"
+
+#include "windows.foundation.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(twinapi);
+
+static const char *debugstr_hstring(HSTRING hstr)
+{
+    const WCHAR *str;
+    UINT32 len;
+    if (hstr && !((ULONG_PTR)hstr >> 16)) return "(invalid)";
+    str = WindowsGetStringRawBuffer(hstr, &len);
+    return wine_dbgstr_wn(str, len);
+}
+
+struct twinapi_appcore
+{
+    IActivationFactory IActivationFactory_iface;
+    LONG ref;
+};
+
+static inline struct twinapi_appcore *impl_from_IActivationFactory(IActivationFactory *iface)
+{
+    return CONTAINING_RECORD(iface, struct twinapi_appcore, IActivationFactory_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE twinapi_appcore_QueryInterface(
+        IActivationFactory *iface, REFIID iid, void **out)
+{
+    TRACE("iface %p, iid %s, out %p stub!\n", iface, debugstr_guid(iid), out);
+
+    if (IsEqualGUID(iid, &IID_IUnknown) ||
+            IsEqualGUID(iid, &IID_IInspectable) ||
+            IsEqualGUID(iid, &IID_IAgileObject) ||
+            IsEqualGUID(iid, &IID_IActivationFactory))
+    {
+        IUnknown_AddRef(iface);
+        *out = iface;
+        return S_OK;
+    }
+
+    FIXME("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
+    *out = NULL;
+    return E_NOINTERFACE;
+}
+
+static ULONG STDMETHODCALLTYPE twinapi_appcore_AddRef(
+        IActivationFactory *iface)
+{
+    struct twinapi_appcore *impl = impl_from_IActivationFactory(iface);
+    ULONG ref = InterlockedIncrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+    return ref;
+}
+
+static ULONG STDMETHODCALLTYPE twinapi_appcore_Release(
+        IActivationFactory *iface)
+{
+    struct twinapi_appcore *impl = impl_from_IActivationFactory(iface);
+    ULONG ref = InterlockedDecrement(&impl->ref);
+    TRACE("iface %p, ref %u.\n", iface, ref);
+    return ref;
+}
+
+static HRESULT STDMETHODCALLTYPE twinapi_appcore_GetIids(
+        IActivationFactory *iface, ULONG *iid_count, IID **iids)
+{
+    FIXME("iface %p, iid_count %p, iids %p stub!\n", iface, iid_count, iids);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE twinapi_appcore_GetRuntimeClassName(
+        IActivationFactory *iface, HSTRING *class_name)
+{
+    FIXME("iface %p, class_name %p stub!\n", iface, class_name);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE twinapi_appcore_GetTrustLevel(
+        IActivationFactory *iface, TrustLevel *trust_level)
+{
+    FIXME("iface %p, trust_level %p stub!\n", iface, trust_level);
+    return E_NOTIMPL;
+}
+
+static HRESULT STDMETHODCALLTYPE twinapi_appcore_ActivateInstance(
+        IActivationFactory *iface, IInspectable **instance)
+{
+    FIXME("iface %p, instance %p stub!\n", iface, instance);
+    return E_NOTIMPL;
+}
+
+static const struct IActivationFactoryVtbl activation_factory_vtbl =
+{
+    twinapi_appcore_QueryInterface,
+    twinapi_appcore_AddRef,
+    twinapi_appcore_Release,
+    /* IInspectable methods */
+    twinapi_appcore_GetIids,
+    twinapi_appcore_GetRuntimeClassName,
+    twinapi_appcore_GetTrustLevel,
+    /* IActivationFactory methods */
+    twinapi_appcore_ActivateInstance,
+};
+
+static struct twinapi_appcore twinapi_appcore =
+{
+    {&activation_factory_vtbl},
+    1
+};
+
+HRESULT WINAPI DllCanUnloadNow(void)
+{
+    return S_FALSE;
+}
+
+HRESULT WINAPI DllGetClassObject(REFCLSID clsid, REFIID riid, void **out)
+{
+    FIXME("clsid %s, riid %s, out %p stub!\n", debugstr_guid(clsid), debugstr_guid(riid), out);
+    return CLASS_E_CLASSNOTAVAILABLE;
+}
+
+HRESULT WINAPI DllGetActivationFactory(HSTRING classid, IActivationFactory **factory)
+{
+    TRACE("classid %s, factory %p.\n", debugstr_hstring(classid), factory);
+    *factory = &twinapi_appcore.IActivationFactory_iface;
+    IUnknown_AddRef(*factory);
+    return S_OK;
+}
diff --git a/dlls/twinapi.appcore.dll/twinapi.appcore.spec b/dlls/twinapi.appcore.dll/twinapi.appcore.spec
new file mode 100644
index 00000000000..721493229c2
--- /dev/null
+++ b/dlls/twinapi.appcore.dll/twinapi.appcore.spec
@@ -0,0 +1,3 @@
+1 stdcall -private DllCanUnloadNow()
+2 stdcall -private DllGetActivationFactory(ptr ptr)
+3 stdcall -private DllGetClassObject(ptr ptr ptr)
From f7483da74b31cb8fb43cfdb7b7aab7b9c5fe92af Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 17 Nov 2021 22:34:20 +0300
Subject: [PATCH] twinapi.appcore.dll: Stub implement
 IEasClientDeviceInformation.

CW-Bug-Id: #19649
---
 dlls/twinapi.appcore.dll/Makefile.in          |   2 +
 dlls/twinapi.appcore.dll/classes.idl          |  23 +++
 dlls/twinapi.appcore.dll/main.c               | 142 +++++++++++++++++-
 include/Makefile.in                           |   1 +
 ...ecurity.exchangeactivesyncprovisioning.idl |  61 ++++++++
 5 files changed, 227 insertions(+), 2 deletions(-)
 create mode 100644 dlls/twinapi.appcore.dll/classes.idl
 create mode 100644 include/windows.security.exchangeactivesyncprovisioning.idl

diff --git a/dlls/twinapi.appcore.dll/Makefile.in b/dlls/twinapi.appcore.dll/Makefile.in
index b96bd5ff03e..f7acd8eae2c 100644
--- a/dlls/twinapi.appcore.dll/Makefile.in
+++ b/dlls/twinapi.appcore.dll/Makefile.in
@@ -3,3 +3,5 @@ IMPORTS = combase

 C_SRCS = \
        main.c
+
+IDL_SRCS = classes.idl
diff --git a/dlls/twinapi.appcore.dll/classes.idl b/dlls/twinapi.appcore.dll/classes.idl
new file mode 100644
index 00000000000..56ea8096642
--- /dev/null
+++ b/dlls/twinapi.appcore.dll/classes.idl
@@ -0,0 +1,23 @@
+/*
+ * Runtime Classes for windows.media.devices.dll
+ *
+ * Copyright 2021 Paul Gofman for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#pragma makedep register
+
+#include "windows.security.exchangeactivesyncprovisioning.idl"
diff --git a/dlls/twinapi.appcore.dll/main.c b/dlls/twinapi.appcore.dll/main.c
index 9de8b65f945..3842e36153c 100644
--- a/dlls/twinapi.appcore.dll/main.c
+++ b/dlls/twinapi.appcore.dll/main.c
@@ -28,7 +28,11 @@

 #include "activation.h"

+#define WIDL_using_Windows_Foundation
+#define WIDL_using_Windows_Foundation_Collections
 #include "windows.foundation.h"
+#define WIDL_using_Windows_Security_ExchangeActiveSyncProvisioning
+#include "windows.security.exchangeactivesyncprovisioning.h"

 WINE_DEFAULT_DEBUG_CHANNEL(twinapi);

@@ -44,9 +48,15 @@ static const char *debugstr_hstring(HSTRING hstr)
 struct twinapi_appcore
 {
     IActivationFactory IActivationFactory_iface;
+    IEasClientDeviceInformation IEasClientDeviceInformation_iface;
     LONG ref;
 };

+static inline struct twinapi_appcore *impl_from_IEasClientDeviceInformation(IEasClientDeviceInformation *iface)
+{
+    return CONTAINING_RECORD(iface, struct twinapi_appcore, IEasClientDeviceInformation_iface);
+}
+
 static inline struct twinapi_appcore *impl_from_IActivationFactory(IActivationFactory *iface)
 {
     return CONTAINING_RECORD(iface, struct twinapi_appcore, IActivationFactory_iface);
@@ -55,6 +65,8 @@ static inline struct twinapi_appcore *impl_from_IActivationFactory(IActivationFa
 static HRESULT STDMETHODCALLTYPE twinapi_appcore_QueryInterface(
         IActivationFactory *iface, REFIID iid, void **out)
 {
+    struct twinapi_appcore *impl = impl_from_IActivationFactory(iface);
+
     TRACE("iface %p, iid %s, out %p stub!\n", iface, debugstr_guid(iid), out);

     if (IsEqualGUID(iid, &IID_IUnknown) ||
@@ -67,6 +79,13 @@ static HRESULT STDMETHODCALLTYPE twinapi_appcore_QueryInterface(
         return S_OK;
     }

+    if (IsEqualGUID(iid, &IID_IEasClientDeviceInformation))
+    {
+        IUnknown_AddRef(iface);
+        *out = &impl->IEasClientDeviceInformation_iface;
+        return S_OK;
+    }
+
     FIXME("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(iid));
     *out = NULL;
     return E_NOINTERFACE;
@@ -114,8 +133,12 @@ static HRESULT STDMETHODCALLTYPE twinapi_appcore_GetTrustLevel(
 static HRESULT STDMETHODCALLTYPE twinapi_appcore_ActivateInstance(
         IActivationFactory *iface, IInspectable **instance)
 {
-    FIXME("iface %p, instance %p stub!\n", iface, instance);
-    return E_NOTIMPL;
+    FIXME("iface %p, instance %p semi-stub!\n", iface, instance);
+
+    IActivationFactory_AddRef(iface);
+    *instance = (IInspectable *)iface;
+
+    return S_OK;
 }

 static const struct IActivationFactoryVtbl activation_factory_vtbl =
@@ -131,9 +154,124 @@ static const struct IActivationFactoryVtbl activation_factory_vtbl =
     twinapi_appcore_ActivateInstance,
 };

+static HRESULT WINAPI eas_client_devinfo_QueryInterface(IEasClientDeviceInformation *iface,
+        REFIID riid, void **ppvObject)
+{
+    struct twinapi_appcore *This = impl_from_IEasClientDeviceInformation(iface);
+    return twinapi_appcore_QueryInterface(&This->IActivationFactory_iface, riid, ppvObject);
+}
+
+static ULONG WINAPI eas_client_devinfo_AddRef(IEasClientDeviceInformation *iface)
+{
+    struct twinapi_appcore *This = impl_from_IEasClientDeviceInformation(iface);
+    return twinapi_appcore_AddRef(&This->IActivationFactory_iface);
+}
+
+static ULONG WINAPI eas_client_devinfo_Release(IEasClientDeviceInformation *iface)
+{
+    struct twinapi_appcore *This = impl_from_IEasClientDeviceInformation(iface);
+    return twinapi_appcore_Release(&This->IActivationFactory_iface);
+}
+
+static HRESULT WINAPI eas_client_devinfo_GetIids(IEasClientDeviceInformation *iface,
+        ULONG *iidCount, IID **iids)
+{
+    struct twinapi_appcore *This = impl_from_IEasClientDeviceInformation(iface);
+    return twinapi_appcore_GetIids(&This->IActivationFactory_iface, iidCount, iids);
+}
+
+static HRESULT WINAPI eas_client_devinfo_GetRuntimeClassName(IEasClientDeviceInformation *iface,
+        HSTRING *className)
+{
+    struct twinapi_appcore *This = impl_from_IEasClientDeviceInformation(iface);
+    return twinapi_appcore_GetRuntimeClassName(&This->IActivationFactory_iface, className);
+}
+
+static HRESULT WINAPI eas_client_devinfo_GetTrustLevel(IEasClientDeviceInformation *iface,
+        TrustLevel *trustLevel)
+{
+    struct twinapi_appcore *This = impl_from_IEasClientDeviceInformation(iface);
+    return twinapi_appcore_GetTrustLevel(&This->IActivationFactory_iface, trustLevel);
+}
+
+static HRESULT WINAPI eas_client_devinfo_get_Id(IEasClientDeviceInformation *iface, GUID* value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI eas_client_devinfo_get_OperatingSystem(IEasClientDeviceInformation *iface,
+        HSTRING* value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    WindowsCreateString(NULL, 0, value);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI eas_client_devinfo_get_FriendlyName(IEasClientDeviceInformation *iface,
+        HSTRING* value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    WindowsCreateString(NULL, 0, value);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI eas_client_devinfo_get_SystemManufacturer(IEasClientDeviceInformation *iface,
+        HSTRING* value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    WindowsCreateString(NULL, 0, value);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI eas_client_devinfo_get_SystemProductName(IEasClientDeviceInformation *iface,
+        HSTRING* value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    WindowsCreateString(NULL, 0, value);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI eas_client_devinfo_get_SystemSku(IEasClientDeviceInformation *iface,
+        HSTRING* value)
+{
+    FIXME("iface %p, value %p stub.\n", iface, value);
+
+    WindowsCreateString(NULL, 0, value);
+
+    return E_NOTIMPL;
+}
+
+static IEasClientDeviceInformationVtbl eas_client_devinfo_vtbl = {
+    eas_client_devinfo_QueryInterface,
+    eas_client_devinfo_AddRef,
+    eas_client_devinfo_Release,
+    /* IInspectable methods */
+    eas_client_devinfo_GetIids,
+    eas_client_devinfo_GetRuntimeClassName,
+    eas_client_devinfo_GetTrustLevel,
+    /* IEasClientDeviceInformation methods */
+    eas_client_devinfo_get_Id,
+    eas_client_devinfo_get_OperatingSystem,
+    eas_client_devinfo_get_FriendlyName,
+    eas_client_devinfo_get_SystemManufacturer,
+    eas_client_devinfo_get_SystemProductName,
+    eas_client_devinfo_get_SystemSku,
+};
+
 static struct twinapi_appcore twinapi_appcore =
 {
     {&activation_factory_vtbl},
+    {&eas_client_devinfo_vtbl},
     1
 };

diff --git a/include/Makefile.in b/include/Makefile.in
index b1087f2ec9d..db0625eaf3b 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -758,6 +758,7 @@ SOURCES = \
 	windows.networking.idl \
 	windows.networking.connectivity.idl \
 	windows.storage.streams.idl \
+	windows.security.exchangeactivesyncprovisioning.idl \
 	windows.system.idl \
 	windows.system.userprofile.idl \
 	windowscontracts.idl \
diff --git a/include/windows.security.exchangeactivesyncprovisioning.idl b/include/windows.security.exchangeactivesyncprovisioning.idl
new file mode 100644
index 00000000000..1b2a743b057
--- /dev/null
+++ b/include/windows.security.exchangeactivesyncprovisioning.idl
@@ -0,0 +1,61 @@
+/*
+ * Copyright 2021 Paul Gofman for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#ifdef __WIDL__
+#pragma winrt ns_prefix
+#endif
+
+import "inspectable.idl";
+import "eventtoken.idl";
+import "windows.foundation.idl";
+
+namespace Windows {
+    namespace Security {
+        namespace ExchangeActiveSyncProvisioning {
+            interface IEasClientDeviceInformation;
+            runtimeclass EasClientDeviceInformation;
+        }
+    }
+}
+
+namespace Windows {
+    namespace Security {
+        namespace ExchangeActiveSyncProvisioning {
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            [exclusiveto(Windows.Security.ExchangeActiveSyncProvisioning.EasClientDeviceInformation)]
+            [uuid(54DFD981-1968-4CA3-B958-E595D16505EB)]
+            interface IEasClientDeviceInformation : IInspectable
+            {
+                [propget] HRESULT Id([out] [retval] GUID* value);
+                [propget] HRESULT OperatingSystem([out] [retval] HSTRING* value);
+                [propget] HRESULT FriendlyName([out] [retval] HSTRING* value);
+                [propget] HRESULT SystemManufacturer([out] [retval] HSTRING* value);
+                [propget] HRESULT SystemProductName([out] [retval] HSTRING* value);
+                [propget] HRESULT SystemSku([out] [retval] HSTRING* value);
+            }
+
+            [activatable(Windows.Foundation.UniversalApiContract, 1.0)]
+            [contract(Windows.Foundation.UniversalApiContract, 1.0)]
+            [threading(both)]
+            runtimeclass EasClientDeviceInformation
+            {
+                [default] interface Windows.Security.ExchangeActiveSyncProvisioning.IEasClientDeviceInformation;
+            }
+       }
+    }
+}
